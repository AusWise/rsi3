//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICanvas")]
    public interface ICanvas {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICanvas/add", ReplyAction="http://tempuri.org/ICanvas/addResponse")]
        void add(Contract.MyPoint p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICanvas/add", ReplyAction="http://tempuri.org/ICanvas/addResponse")]
        System.Threading.Tasks.Task addAsync(Contract.MyPoint p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICanvas/get", ReplyAction="http://tempuri.org/ICanvas/getResponse")]
        Contract.MyPoint get(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICanvas/get", ReplyAction="http://tempuri.org/ICanvas/getResponse")]
        System.Threading.Tasks.Task<Contract.MyPoint> getAsync(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICanvas/size", ReplyAction="http://tempuri.org/ICanvas/sizeResponse")]
        int size();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICanvas/size", ReplyAction="http://tempuri.org/ICanvas/sizeResponse")]
        System.Threading.Tasks.Task<int> sizeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICanvas/clear")]
        void clear();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICanvas/clear")]
        System.Threading.Tasks.Task clearAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICanvas/centerOfGravity", ReplyAction="http://tempuri.org/ICanvas/centerOfGravityResponse")]
        Contract.MyPoint centerOfGravity();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICanvas/centerOfGravity", ReplyAction="http://tempuri.org/ICanvas/centerOfGravityResponse")]
        System.Threading.Tasks.Task<Contract.MyPoint> centerOfGravityAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICanvasChannel : Client.ServiceReference1.ICanvas, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CanvasClient : System.ServiceModel.ClientBase<Client.ServiceReference1.ICanvas>, Client.ServiceReference1.ICanvas {
        
        public CanvasClient() {
        }
        
        public CanvasClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CanvasClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CanvasClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CanvasClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void add(Contract.MyPoint p) {
            base.Channel.add(p);
        }
        
        public System.Threading.Tasks.Task addAsync(Contract.MyPoint p) {
            return base.Channel.addAsync(p);
        }
        
        public Contract.MyPoint get(int i) {
            return base.Channel.get(i);
        }
        
        public System.Threading.Tasks.Task<Contract.MyPoint> getAsync(int i) {
            return base.Channel.getAsync(i);
        }
        
        public int size() {
            return base.Channel.size();
        }
        
        public System.Threading.Tasks.Task<int> sizeAsync() {
            return base.Channel.sizeAsync();
        }
        
        public void clear() {
            base.Channel.clear();
        }
        
        public System.Threading.Tasks.Task clearAsync() {
            return base.Channel.clearAsync();
        }
        
        public Contract.MyPoint centerOfGravity() {
            return base.Channel.centerOfGravity();
        }
        
        public System.Threading.Tasks.Task<Contract.MyPoint> centerOfGravityAsync() {
            return base.Channel.centerOfGravityAsync();
        }
    }
}
